<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE requests>
<requests>

  <!-- skos:inScheme -->

  <request>
    <title><![CDATA[Show SKOS concepts without a <code>skos:inScheme</code>
      property (LIMIT 50).]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Concept_IRI ?prefLabel
    FROM #THESAURUS# {
      ?Concept_IRI a skos:Concept
      OPTIONAL { ?Concept_IRI skos:prefLabel ?prefLabel }
      FILTER NOT EXISTS { ?Concept_IRI skos:inScheme ?o }
    }
    ORDER BY ?Concept_IRI
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Add a <code>skos:inScheme</code> property to all
      SKOS concepts that don't already have one.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    INSERT {
      ?s skos:inScheme ?scheme
    }
    WHERE {
      ?s a skos:Concept .
      ?s skos:broader*/skos:topConceptOf ?scheme
      FILTER NOT EXISTS { ?s skos:inScheme ?o }
    }
    ]]></sparql>
  </request>

  <!-- Bad mix of skos:topConceptOf and skos:broader -->
  <request>
    <title><![CDATA[Show SKOS concepts that have <em>both</em>
      <code>skos:topConceptOf</code> and <code>skos:broader</code>
      properties.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Concept_IRI ?prefLabel ?Broader_IRI ?Broader_prefLabel
    FROM #THESAURUS# {
      ?Concept_IRI a skos:Concept .
      ?Concept_IRI skos:topConceptOf ?scheme .
      ?Concept_IRI skos:broader ?Broader_IRI .
      OPTIONAL { ?Concept_IRI skos:prefLabel ?prefLabel }
      OPTIONAL { ?Broader_IRI skos:prefLabel ?Broader_prefLabel }
    }
    ORDER BY ?Concept_IRI
  ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Remove the <code>skos:topConceptOf</code> property from
      SKOS concepts that have <em>both</em> <code>skos:topConceptOf</code>
      and <code>skos:broader</code> properties.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    DELETE {
      ?Concept_IRI skos:topConceptOf ?scheme .
    }
    WHERE {
      ?Concept_IRI a skos:Concept .
      ?Concept_IRI skos:topConceptOf ?scheme .
      ?Concept_IRI skos:broader ?Broader_IRI .
    }
  ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show SKOS concepts that have either a
      <code>skos:topConceptOf</code> or <code>skos:hasTopConcept</code>
      property and that are narrower than another
      concept (expressed using <em>either</em> <code>skos:narrower</code> or
      <code>skos:broader</code>)
      which is also labelled as a top concept
      (<em>either</em> with <code>skos:topConceptOf</code> or
      <code>skos:hasTopConcept</code>).
      This shows the concepts (in the ‘Concept IRI’ column of the result)
      that will have their <code>skos:topConceptOf</code> and
      <code>skos:hasTopConcept</code> properties deleted by the
      following update.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT DISTINCT ?Concept_IRI ?Broader_IRI
    FROM #THESAURUS# {
      ?Concept_IRI a skos:Concept .
      { ?Concept_IRI skos:topConceptOf ?scheme }
        UNION
      { ?scheme skos:hasTopConcept ?Concept_IRI }
      ?Broader_IRI a skos:Concept
      { ?Broader_IRI skos:topConceptOf ?scheme }
        UNION
      { ?scheme skos:hasTopConcept ?Broader_IRI }
      { ?Concept_IRI skos:broader ?Broader_IRI }
        UNION
      { ?Broader_IRI skos:narrower ?Concept_IRI }
    }
  ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Remove <code>skos:topConceptOf</code> and
      <code>skos:hasTopConcept</code>
      properties from SKOS concepts that are narrower than another
      concept (expressed using <em>either</em> <code>skos:narrower</code> or
      <code>skos:broader</code>)
      which is also labelled as a top concept
      (<em>either</em> with <code>skos:topConceptOf</code> or
      <code>skos:hasTopConcept</code>).
      <strong>WARNING:</strong> this can make the narrower concept seem
      to disappear from PoolParty if it is only
      linked in the hierarchy using <code>skos:broader</code>.
      Please make use of the Query
      "Show SKOS concept pairs that are related with <em>either</em>
      <code>skos:broader</code> or <code>skos:narrower</code>
      <em>but not both</em>" and the
      corresponding Update if needed, before using this update.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    DELETE {
      ?Concept_IRI skos:topConceptOf ?scheme .
      ?scheme skos:hasTopConcept ?Concept_IRI .
    }
    WHERE {
      ?Concept_IRI a skos:Concept .
      { ?Concept_IRI skos:topConceptOf ?scheme }
        UNION
      { ?scheme skos:hasTopConcept ?Concept_IRI }
      ?Broader_IRI a skos:Concept
      { ?Broader_IRI skos:topConceptOf ?scheme }
        UNION
      { ?scheme skos:hasTopConcept ?Broader_IRI }
      { ?Concept_IRI skos:broader ?Broader_IRI }
        UNION
      { ?Broader_IRI skos:narrower ?Concept_IRI }
    }
  ]]></sparql>
  </request>


  <!-- Unbalanced hasTopConcept/topConceptOf -->

  <request>
    <title><![CDATA[Show SKOS concept scheme/top concept pairs that are
      related
      with <em>either</em> <code>skos:hasTopConcept</code> or
      <code>skos:topConceptOf</code>
      <em>but not both</em> (LIMIT 50).]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?ConceptScheme_IRI ?Concept_IRI
           ?Concept_prefLabel ?Missing_property
    FROM #THESAURUS# {
      ?ConceptScheme_IRI a skos:ConceptScheme .
      ?Concept_IRI a skos:Concept .
      OPTIONAL { ?Concept_IRI skos:prefLabel ?Concept_prefLabel }
      {
        ?ConceptScheme_IRI skos:hasTopConcept ?Concept_IRI
        BIND ("skos:topConceptOf" AS ?Missing_property)
        FILTER NOT EXISTS {
          ?Concept_IRI skos:topConceptOf ?ConceptScheme_IRI
        }
      } UNION
      {
        ?Concept_IRI skos:topConceptOf ?ConceptScheme_IRI
        BIND ("skos:hasTopConcept" AS ?Missing_property)
        FILTER NOT EXISTS {
          ?ConceptScheme_IRI skos:hasTopConcept ?Concept_IRI
        }
      }
    }
    ORDER BY ?ConceptScheme_IRI ?Concept_IRI
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Add missing <code>skos:hasTopConcept</code> and
      <code>skos:topConceptOf</code>
      properties to cases where only one is already present. Do not run this
      update if the Query "Show SKOS concepts that have <em>both</em>
      <code>skos:topConceptOf</code> and <code>skos:broader</code> properties"
      returns any results.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    INSERT {
      ?Concept_IRI skos:topConceptOf ?ConceptScheme_IRI
    }
    WHERE {
      ?ConceptScheme_IRI a skos:ConceptScheme .
      ?Concept_IRI a skos:Concept .
      ?ConceptScheme_IRI skos:hasTopConcept ?Concept_IRI
      FILTER NOT EXISTS {
        ?Concept_IRI skos:topConceptOf ?ConceptScheme_IRI
      }
    } ;
    # Repetition of this prefix not required according
    # to the SPARQL spec, but do this anyway so as
    # to work with PP Preview Server's underlying Virtuoso Server.
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    INSERT {
      ?ConceptScheme_IRI skos:hasTopConcept ?Concept_IRI
    }
    WHERE {
      ?ConceptScheme_IRI a skos:ConceptScheme .
      ?Concept_IRI a skos:Concept .
      ?Concept_IRI skos:topConceptOf ?ConceptScheme_IRI
      FILTER NOT EXISTS {
        ?ConceptScheme_IRI skos:hasTopConcept ?Concept_IRI
      }
    }
    ]]></sparql>
  </request>

  <!-- Unbalanced broader/narrower -->

  <request>
    <title><![CDATA[Show SKOS concept pairs that are related with
      <em>either</em>
      <code>skos:broader</code> or <code>skos:narrower</code>
      <em>but not both</em> (LIMIT 50).]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Broader_IRI ?Broader_prefLabel
           ?Narrower_IRI ?Narrower_prefLabel ?Missing_property
    FROM #THESAURUS# {
      ?Broader_IRI a skos:Concept .
      ?Narrower_IRI a skos:Concept .
      OPTIONAL { ?Broader_IRI skos:prefLabel ?Broader_prefLabel }
      OPTIONAL { ?Narrower_IRI skos:prefLabel ?Narrower_prefLabel }
      {
        ?Broader_IRI skos:narrower ?Narrower_IRI
        BIND ("skos:broader" AS ?Missing_property)
        FILTER NOT EXISTS { ?Narrower_IRI skos:broader ?Broader_IRI }
      } UNION
      {
        ?Narrower_IRI skos:broader ?Broader_IRI
        BIND ("skos:narrower" AS ?Missing_property)
        FILTER NOT EXISTS { ?Broader_IRI skos:narrower ?Narrower_IRI }
      }
    }
    ORDER BY ?Concept_IRI
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Add missing <code>skos:broader</code> and
      <code>skos:narrower</code>
      properties to cases where only one is already present.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    INSERT {
      ?Narrower_IRI skos:broader ?Broader_IRI
    }
    WHERE {
      ?Broader_IRI a skos:Concept .
      ?Narrower_IRI a skos:Concept .
      ?Broader_IRI skos:narrower ?Narrower_IRI
      FILTER NOT EXISTS { ?Narrower_IRI skos:broader ?Broader_IRI }
    } ;
    # Repetition of this prefix not required according
    # to the SPARQL spec, but do this anyway so as
    # to work with PP Preview Server's underlying Virtuoso Server.
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    INSERT {
      ?Broader_IRI skos:narrower ?Narrower_IRI
    }
    WHERE {
      ?Broader_IRI a skos:Concept .
      ?Narrower_IRI a skos:Concept .
      ?Narrower_IRI skos:broader ?Broader_IRI
      FILTER NOT EXISTS { ?Broader_IRI skos:narrower ?Narrower_IRI }
    }
    ]]></sparql>
  </request>



  <!-- Dangling concepts -->

  <request>
    <title><![CDATA[Show dangling SKOS concepts based on
      <code>skos:broader</code>/<code>skos:topConceptOf</code>
      (LIMIT 50).
      This is the wrong answer for PoolParty, unless you have all instances of
      <code>skos:broader</code>/<code>skos:narrower</code> and
      <code>skos:hasTopConcept</code>/<code>skos:topConceptOf</code>
      correctly paired up.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Concept_IRI ?prefLabel
    FROM #THESAURUS# {
      ?Concept_IRI a skos:Concept
      OPTIONAL { ?Concept_IRI skos:prefLabel ?prefLabel }
      FILTER NOT EXISTS {
        ?Concept_IRI skos:broader*/skos:topConceptOf ?scheme
      }
    }
    ORDER BY ?Concept_IRI
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show dangling SKOS concepts based on
      skos:narrower/skos:hasTopConcept (LIMIT 50).
      This is the correct answer for PoolParty, but may not complete on
      large vocabularies.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Concept_IRI ?prefLabel
    FROM #THESAURUS# {
      ?Concept_IRI a skos:Concept
      OPTIONAL { ?Concept_IRI skos:prefLabel ?prefLabel }
      FILTER NOT EXISTS {
        ?Concept_IRI ^skos:narrower*/^skos:hasTopConcept ?scheme
      }
      # FILTER NOT EXISTS {
      #   ?scheme skos:hasTopConcept/skos:narrower* ?Concept_IRI  }
    }
    ORDER BY ?Concept_IRI
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show dangling SKOS concepts based on
      <code>skos:narrower</code>/<code>skos:hasTopConcept</code> (no LIMIT):
      this is the correct answer for PoolParty, but may not complete on
      large vocabularies.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Concept_IRI ?prefLabel
    FROM #THESAURUS# {
      ?Concept_IRI a skos:Concept
      OPTIONAL { ?Concept_IRI skos:prefLabel ?prefLabel }
      FILTER NOT EXISTS {
        ?Concept_IRI ^skos:narrower*/^skos:hasTopConcept ?scheme
      }
    }
    ORDER BY ?Concept_IRI
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[<strong>WARNING:</strong> This update is a work
      in progress.
      Delete dangling SKOS concepts based on
      <code>skos:narrower</code>/<code>skos:hasTopConcept</code>.
      This update may not complete on large vocabularies.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    DELETE {
      ?Concept_IRI ?p ?o
    }
    WHERE {
      ?Concept_IRI a skos:Concept .
      ?Concept_IRI ?p ?o
      FILTER NOT EXISTS {
        ?Concept_IRI ^skos:narrower*/^skos:hasTopConcept ?scheme
      }
    }
    ]]></sparql>
  </request>

  <!-- Deprecated resources -->

  <request>
    <title><![CDATA[Show <code>owl:deprecated</code> resources
      (LIMIT 50). Both the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Named_Graph ?Resource_IRI ?prefLabel ?rdfs_Label
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated# {
      GRAPH ?Named_Graph {
        ?Resource_IRI owl:deprecated true
        OPTIONAL { ?Resource_IRI skos:prefLabel ?prefLabel }
        OPTIONAL { ?Resource_IRI rdfs:label ?rdfs_Label }
      }
    }
    ORDER BY ?Resource_IRI
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show <code>owl:deprecated</code> resources
      (no LIMIT). Both the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Named_Graph ?Resource_IRI ?prefLabel ?rdfs_Label
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated# {
      GRAPH ?Named_Graph {
        ?Resource_IRI owl:deprecated true
        OPTIONAL { ?Resource_IRI skos:prefLabel ?prefLabel }
        OPTIONAL { ?Resource_IRI rdfs:label ?rdfs_Label }
      }
    }
    ORDER BY ?Resource_IRI
    ]]></sparql>
  </request>

  <request>
    <title><![CDATA[Show resources that are <em>both</em>
      <code>skos:Concept</code> and <code>owl:deprecated</code>
      (LIMIT 50). Both the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried; the two triples must be in the same named graph.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Named_Graph ?Resource_IRI ?prefLabel ?rdfs_Label
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated# {
      GRAPH ?Named_Graph {
        ?Resource_IRI a skos:Concept .
        ?Resource_IRI owl:deprecated true
        OPTIONAL { ?Resource_IRI skos:prefLabel ?prefLabel }
        OPTIONAL { ?Resource_IRI rdfs:label ?rdfs_Label }
      }
    }
    ORDER BY ?Resource_IRI
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show resources that are <em>both</em>
      <code>skos:Concept</code> and <code>owl:deprecated</code>
      (no LIMIT). Both the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried; the two triples must be in the same named graph..]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Named_Graph ?Resource_IRI ?prefLabel ?rdfs_Label
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated# {
      GRAPH ?Named_Graph {
        ?Resource_IRI a skos:Concept .
        ?Resource_IRI owl:deprecated true
        OPTIONAL { ?Resource_IRI skos:prefLabel ?prefLabel }
        OPTIONAL { ?Resource_IRI rdfs:label ?rdfs_Label }
      }
    }
    ORDER BY ?Resource_IRI
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[<i>Warning: not yet tested with the latest PoolParty.</i>
      Remove the <code>owl:deprecated</code> property
      from all resources
      that are <em>both</em> <code>skos:Concept</code> and
      <code>owl:deprecated</code>. Remove
      the <code>rdfs:label</code> property for these resources,
      as long as they also
      have a <code>skos:prefLabel</code>.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    # Delete the rdfs:label first, separately, because its deletion
    # is conditional on the presence of a skos:prefLabel ...
    WITH #THESAURUS#
    DELETE {
      ?Resource_IRI rdfs:label ?label
    }
    WHERE {
      ?Resource_IRI a skos:Concept .
      ?Resource_IRI owl:deprecated true .
      ?Resource_IRI rdfs:label ?label .
      ?Resource_IRI skos:prefLabel ?prefLabel
    } ;
    # ... whereas, deletion of the owl:deprecated property is not
    # conditional in the same way.
    # Repetition of this prefix not required according
    # to the SPARQL spec, but do this anyway so as
    # to work with PP Preview Server's underlying Virtuoso Server.
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    DELETE {
      ?Resource_IRI owl:deprecated true
    }
    WHERE {
      ?Resource_IRI a skos:Concept .
      ?Resource_IRI owl:deprecated true
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[<i>Warning: not yet tested with the latest PoolParty.</i>
      Show resources that are <em>both</em>
      <code>skos:ConceptScheme</code> and <code>owl:deprecated</code>
      (no LIMIT). If this query returns any results, it is recommended
      that you run the query "Show resources that are
      <code>owl:deprecated</code> but not also
      SKOS concepts, with all their properties (no LIMIT)" before deciding
      whether to run the following update.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Resource_IRI ?prefLabel ?rdfs_Label
    FROM #THESAURUS# {
      ?Resource_IRI a skos:ConceptScheme .
      ?Resource_IRI owl:deprecated true
      OPTIONAL { ?Resource_IRI skos:prefLabel ?prefLabel }
      OPTIONAL { ?Resource_IRI rdfs:label ?rdfs_Label }
    }
    ORDER BY ?Resource_IRI
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[<i>Warning: not yet tested with the latest PoolParty.</i>
      Remove the <code>owl:deprecated</code> property
      from all resources
      that are <em>both</em> <code>skos:ConceptScheme</code> and
      <code>owl:deprecated</code>, as long as they also
      have an <code>rdfs:label</code>.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    DELETE {
      ?Resource_IRI owl:deprecated true
    }
    WHERE {
      ?Resource_IRI a skos:ConceptScheme .
      ?Resource_IRI rdfs:label ?label .
      ?Resource_IRI owl:deprecated true
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show resources that are <code>owl:deprecated</code>
      but not also SKOS concepts, with all their properties (LIMIT 50).
      Both the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Named_Graph ?Resource_IRI ?Predicate ?Object
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated#
    WHERE {
      GRAPH ?Named_Graph {
        ?Resource_IRI owl:deprecated true .
        ?Resource_IRI ?Predicate ?Object .
        FILTER NOT EXISTS { ?Resource_IRI a skos:Concept }
      }
    }
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show resources that are <code>owl:deprecated</code>
      but not also SKOS concepts, with all their properties (no LIMIT).
      Both the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Named_Graph ?Resource_IRI ?Predicate ?Object
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated#
    WHERE {
      GRAPH ?Named_Graph {
        ?Resource_IRI owl:deprecated true .
        ?Resource_IRI ?Predicate ?Object .
        FILTER NOT EXISTS { ?Resource_IRI a skos:Concept }
      }
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[<i>Warning: not yet tested with the latest PoolParty.</i>
      Remove resources that are <code>owl:deprecated</code>
      but not also
      SKOS concepts, with all their properties.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    WITH #THESAURUS#
    DELETE {
      ?Resource_IRI ?p ?o
    }
    WHERE {
      ?Resource_IRI owl:deprecated true .
      ?Resource_IRI ?p ?o .
      FILTER NOT EXISTS { ?Resource_IRI a skos:Concept }
    }
    ]]></sparql>
  </request>

  <request>
    <title><![CDATA[Show all triples of resources that are in <em>both</em>
      the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Named_Graph ?Resource_IRI ?Predicate ?Object
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated#
    WHERE {
      GRAPH ?Named_Graph {
        ?Resource_IRI ?Predicate ?Object .
        FILTER EXISTS {
          GRAPH #THESAURUS# {
              ?Resource_IRI ?p2 ?o2 .
          }
          GRAPH #THESAURUS/deprecated# {
              ?Resource_IRI ?p3 ?o3 .
          }
        }
      }
    }
    ORDER BY ?Named_Graph ?Resource_IRI ?Predicate ?Object
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show triples in the
      <code>.../thesaurus/deprecated</code> named graph
      that have a subject that is a resource in the
      <code>.../thesaurus</code> named graph.
      These are the triples that will be deleted from the
      <code>.../thesaurus/deprecated</code> named graph
      by the following Update.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    SELECT ?Resource_IRI ?Predicate ?Object
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated#
    WHERE {
      GRAPH #THESAURUS/deprecated# {
        ?Resource_IRI ?Predicate ?Object .
        FILTER EXISTS {
          GRAPH #THESAURUS# {
              ?Resource_IRI ?p2 ?o2 .
          }
        }
      }
    }
    ORDER BY ?Named_Graph ?Resource_IRI ?Predicate ?Object
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Remove triples from the
      <code>.../thesaurus/deprecated</code> named graph
      that have a subject that is a resource in the
      <code>.../thesaurus</code> named graph.
      <strong>WARNING:</strong> This may have unexpected results.
      Please use the preceding Query
      to see exactly which triples will be deleted.
      ]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    DELETE {
      GRAPH #THESAURUS/deprecated# {
        ?Resource_IRI ?Predicate ?Object .
      }
    }
    USING NAMED #THESAURUS#
    USING NAMED #THESAURUS/deprecated#
    WHERE {
      GRAPH #THESAURUS/deprecated# {
        ?Resource_IRI ?Predicate ?Object .
        FILTER EXISTS {
          GRAPH #THESAURUS# {
              ?Resource_IRI ?p2 ?o2 .
          }
        }
      }
    }
    ]]></sparql>
  </request>

  <!-- Malformed IRIs -->

  <request>
    <title><![CDATA[Show triples that include an IRI containing whitespace
      (LIMIT 50). (The presence of whitespace will prevent the vocabulary
      from being correctly imported into the ANDS Vocabulary portal and
      repository.)]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    SELECT ?s ?p ?o
    FROM #THESAURUS# {
      ?s ?p ?o
      FILTER ((isIRI(?s) && REGEX(STR(?s),"\\p{Z}")) ||
      (isIRI(?p) && REGEX(STR(?p),"\\p{Z}")) ||
      (isIRI(?o) && REGEX(STR(?o),"\\p{Z}")))
    }
    LIMIT 50
    ]]></sparql>
  </request>

  <!-- Empty labels -->

  <request>
    <title><![CDATA[Show empty labels (rdfs:label, dc:title,
      dcterms:title, skos:prefLabel, skos:altLabel, skos:hiddenLabel)
      (LIMIT 50).
      (Empty labels can not be edited or deleted in PoolParty.)]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    PREFIX dc: <http://purl.org/dc/elements/1.1/>
    PREFIX dcterms: <http://purl.org/dc/terms/>
    SELECT ?Resource_IRI ?prefLabel ?Predicate
    FROM #THESAURUS# {
      ?Resource_IRI ?Predicate ?Object
      FILTER (?Predicate IN (rdfs:label, dc:title, dcterms:title,
        skos:prefLabel, skos:altLabel, skos:hiddenLabel))
      FILTER (REGEX(STR(?Object),"^\\p{Z}*$"))
      OPTIONAL {
        ?Resource_IRI skos:prefLabel ?prefLabel
      }
    }
    LIMIT 50
    ]]></sparql>
  </request>

  <request>
    <title><![CDATA[Show empty labels (rdfs:label, dc:title,
      dcterms:title, skos:prefLabel, skos:altLabel, skos:hiddenLabel)
      (no LIMIT).
      (Empty labels can not be edited or deleted in PoolParty.)]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    PREFIX dc: <http://purl.org/dc/elements/1.1/>
    PREFIX dcterms: <http://purl.org/dc/terms/>
    SELECT ?Resource_IRI ?prefLabel ?Predicate
    FROM #THESAURUS# {
      ?Resource_IRI ?Predicate ?Object
      FILTER (?Predicate IN (rdfs:label, dc:title, dcterms:title,
        skos:prefLabel, skos:altLabel, skos:hiddenLabel))
      FILTER (REGEX(STR(?Object),"^\\p{Z}*$"))
      OPTIONAL {
        ?Resource_IRI skos:prefLabel ?prefLabel
      }
    }
    ]]></sparql>
  </request>

  <request>
    <title><![CDATA[Remove empty labels (rdfs:label, dc:title,
      dcterms:title, skos:prefLabel, skos:altLabel, skos:hiddenLabel).
      (Empty labels can not be edited or deleted in PoolParty.)
      <strong>WARNING:</strong> the result is unknown if a prefLabel is
      deleted.
      ]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    PREFIX dc: <http://purl.org/dc/elements/1.1/>
    PREFIX dcterms: <http://purl.org/dc/terms/>
    WITH #THESAURUS#
    DELETE {
      ?Resource_IRI ?Predicate ?Object
    }
    WHERE {
      ?Resource_IRI ?Predicate ?Object
      FILTER (?Predicate IN (rdfs:label, dc:title, dcterms:title,
        skos:prefLabel, skos:altLabel, skos:hiddenLabel))
      FILTER (REGEX(STR(?Object),"^\\p{Z}*$"))
      OPTIONAL {
        ?Resource_IRI skos:prefLabel ?prefLabel
      }
    }
    ]]></sparql>
  </request>

  <!-- Patching up after migration to PoolParty Release 5.5. -->

  <request>
    <title><![CDATA[<b>ANDS use only during migration to PoolParty
      Release 5.5</b>:
      Remove extraneous quality scenario triple
      left over from migration to PoolParty Release 5.5.
      See <a
      href="https://help.poolparty.biz/doc/user-guide-for-knowledge-engineers/troubleshooting/remove-duplicate-quality-scenario-triple-from-the-thesaurus-graph-introduced-on-upgrade-to-5-6-or-5-5"
      target="_blank">PoolParty's information note</a>.
      ]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    # We do SWC's update, even though a bit odd.
    WITH #THESAURUS#
    DELETE {
      ?s ?p ?o
    }
    WHERE {
      <http://schema.semantic-web.at/ppt/3.2/quality/scenario/dialog.qualitysettings.scenario.default> ?p ?o .
      ?s ?p2 ?o2
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show all triples in the
      <code>qualitySettings</code> named graph.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    SELECT ?s ?p ?o
    FROM #THESAURUS/qualitySettings#
    WHERE {
      ?s ?p ?o
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[<b>ANDS use only during migration to PoolParty
      Release 5.5</b>:
      Remove all triples from the
      <code>qualitySettings</code> named graph.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    WITH #THESAURUS/qualitySettings#
    DELETE {
      ?s ?p ?o
    }
    WHERE {
      ?s ?p ?o
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[<b>ANDS use only during migration to PoolParty
      Release 5.5</b>:
      Move quality settings triples from the <code>thesaurus</code>
      named graph into the <code>qualitySettings</code>
      named graph.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    DELETE {
      GRAPH #THESAURUS# {
        ?s ?p ?o
      }
    }
    INSERT {
      GRAPH #THESAURUS/qualitySettings# {
        ?s ?p ?o
      }
    }
    USING #THESAURUS#
    WHERE {
      ?s ?p ?o
      FILTER (STRSTARTS(STR(?p),
              "http://schema.semantic-web.at/ppt/3.2/quality"))
    }
    ]]></sparql>
  </request>

  <!-- Move deprecated concepts and their histories into "hidden"
       named graphs, and back again. -->

  <request>
    <title><![CDATA[Show all triples in the
      <code>.../thesaurus/deprecated</code> named graph, together with
      the corresponding entries in the
      <code>.../thesaurus/history</code> named graph, that will be
      moved into "hidden" named graphs by the following
      Update.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    SELECT ?g ?s ?p ?o
    FROM NAMED #THESAURUS/deprecated#
    FROM NAMED #THESAURUS/history#
    WHERE {
      {
        GRAPH #THESAURUS/deprecated# {
          ?s ?p ?o
        }
        BIND (#THESAURUS/deprecated# AS ?g)
      }
      UNION
      {
        GRAPH #THESAURUS/history# {
          ?s ?p ?o .
          ?s <http://purl.org/vocab/changeset/schema#subjectOfChange> ?s2
          GRAPH #THESAURUS/deprecated# {
            ?s2 ?p2 ?o2
          }
        }
        BIND (#THESAURUS/history# AS ?g)
      }
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Move all resources in the
      <code>.../thesaurus/deprecated</code> named graph, together with
      the corresponding entries in the
      <code>.../thesaurus/history</code> named graph, into
      "hidden" named graphs so that they will not be imported during
      the RVA publication process. Use the preceding Query to see
      which triples will be moved.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    DELETE {
      GRAPH #THESAURUS/history# {
        ?s ?p ?o
      }
    }
    INSERT {
      GRAPH #THESAURUS/history/hidden# {
        ?s ?p ?o
      }
    }
    USING NAMED #THESAURUS/deprecated#
    USING NAMED #THESAURUS/history#
    WHERE {
      GRAPH #THESAURUS/history# {
        ?s ?p ?o .
        ?s <http://purl.org/vocab/changeset/schema#subjectOfChange> ?s2
        GRAPH #THESAURUS/deprecated# {
          ?s2 ?p2 ?o2
        }
      }
    }
    ;
    DELETE {
      GRAPH #THESAURUS/deprecated# {
        ?s ?p ?o
      }
    }
    INSERT {
      GRAPH #THESAURUS/deprecated/hidden# {
        ?s ?p ?o
      }
    }
    USING #THESAURUS/deprecated#
    WHERE {
      ?s ?p ?o
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show all triples in the
      <code>.../thesaurus/deprecated/hidden</code> and
      <code>.../thesaurus/history/hidden</code> named graphs.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    SELECT ?g ?s ?p ?o
    FROM NAMED #THESAURUS/deprecated/hidden#
    FROM NAMED #THESAURUS/history/hidden#
    WHERE {
      GRAPH ?g {
        ?s ?p ?o
      }
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Move all triples in the
      <code>.../thesaurus/deprecated/hidden</code> named graph
      back into the <code>.../thesaurus/deprecated</code> named graph,
      and all triples in the
      <code>.../thesaurus/history/hidden</code> named graph
      back into the <code>.../thesaurus/history</code> named
      graph.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    DELETE {
      GRAPH #THESAURUS/history/hidden# {
        ?s ?p ?o
      }
    }
    INSERT {
      GRAPH #THESAURUS/history# {
        ?s ?p ?o
      }
    }
    USING #THESAURUS/history/hidden#
    WHERE {
      ?s ?p ?o
    }
    ;
    DELETE {
      GRAPH #THESAURUS/deprecated/hidden# {
        ?s ?p ?o
      }
    }
    INSERT {
      GRAPH #THESAURUS/deprecated# {
        ?s ?p ?o
      }
    }
    USING #THESAURUS/deprecated/hidden#
    WHERE {
      ?s ?p ?o
    }
    ]]></sparql>
  </request>

  <!-- Leading and trailing whitespace in literals -->

  <request>
    <title><![CDATA[Show triples in which the object is a literal that
      has either leading or trailing whitespace (LIMIT 50).  Both the
      <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    SELECT ?Named_Graph ?s ?p ?o
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated# {
      GRAPH ?Named_Graph {
        ?s ?p ?o
        FILTER (isLiteral(?o) && REGEX(STR(?o),"(^(\\p{Z}|\\p{Cc}))|((\\p{Z}|\\p{Cc})$)"))
      }
    }
    LIMIT 50
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Show triples in which the object is a literal that
      has either leading or trailing whitespace (no LIMIT).  Both the
      <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      queried.]]></title>
    <type>Query</type>
    <sparql><![CDATA[
    SELECT ?Named_Graph ?s ?p ?o
    FROM NAMED #THESAURUS#
    FROM NAMED #THESAURUS/deprecated# {
      GRAPH ?Named_Graph {
        ?s ?p ?o
        FILTER (isLiteral(?o) && REGEX(STR(?o),"(^(\\p{Z}|\\p{Cc}))|((\\p{Z}|\\p{Cc})$)"))
      }
    }
    ]]></sparql>
  </request>
  <request>
    <title><![CDATA[Remove leading and trailing whitespace from
      literal objects.  Both the <code>.../thesaurus</code> and
      <code>.../thesaurus/deprecated</code> named graphs are
      updated.]]></title>
    <type>Update</type>
    <sparql><![CDATA[
    WITH #THESAURUS#
    DELETE {
      ?s ?p ?o
    }
    INSERT {
      ?s ?p ?o2
    }
    WHERE {
      ?s ?p ?o
      FILTER (isLiteral(?o) && REGEX(STR(?o),"(^(\\p{Z}|\\p{Cc}))|((\\p{Z}|\\p{Cc})$)"))
      BIND (REPLACE(?o, "(^(\\p{Z}|\\p{Cc}))|((\\p{Z}|\\p{Cc})$)", "") AS ?o2)
    }
    ;
    WITH #THESAURUS/deprecated#
    DELETE {
      ?s ?p ?o
    }
    INSERT {
      ?s ?p ?o2
    }
    WHERE {
      ?s ?p ?o
      FILTER (isLiteral(?o) && REGEX(STR(?o),"(^(\\p{Z}|\\p{Cc}))|((\\p{Z}|\\p{Cc})$)"))
      BIND (REPLACE(?o, "(^(\\p{Z}|\\p{Cc}))|((\\p{Z}|\\p{Cc})$)", "") AS ?o2)
    }
    ]]></sparql>
  </request>

</requests>
